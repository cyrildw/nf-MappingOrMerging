params {
   merge_bam = false             //make it true to merge bam files ==> See BamToMerge.csv for csv design
   outdir = './results'          //output directory
   genome = ''                   //fasta file that is used as a reference for mapping
   bt2index = ''                 //not used at the moment
   genome_prefix = 'SacCer3'     //prefix for the genome
   bowtie_mapping = true         //set true to use bowtie as a mapping software
   bowtie_id = 'BOWTIE'          //bowtie ID used in file names
   subread_mapping = false       //set true to use subread as a mapping software
   subread_id = 'SUBREAD'        //subread ID used in file names
   mapped_id='BOWTIE'            //not used at the moment

   //skip_trimming = false
   trim_galore_options = '--nextseq 20 -q 20 --illumina --gzip --paired --no_report_file --suppress_warn'      //do no indicate cpus
   bamcoverage_options = '--extendReads --centerReads --scaleFactor 1 --normalizeUsing CPM  --exactScaling'    //add --MNase if necessary 

   samtools_flag_filter = '-f 3 -F 4'     //samtools filters or any other option exept -q. -f 3 includes paired reads and properly mapped. -F 4 excludes unmapped reads
   samtools_q_filter = 0                  //samtools quality mapping filter
   bin_size = 25                          //The bin size used by bamCoverage
   input_design = './InputFiles.csv'      //location of the design csv file
   input_dir = './data/'                  //where is stored (can be symlink) the data (fastq files (can be .fastq.gz), genome file)
}
process {
   container = ''                //need a container with the necessary softwares (trim_galore, bowtie2, samtools, subread if used, deeptools)
   queue = ''                    //configure to run on given cluster
   time = ''                     //indicate walltime
   withLabel: 'multiCpu' {
      cpus=6                     //set cpu number for demanding jobs
   }
   withLabel: 'multiCpu_short'{
      cpus=3                     //set cpu number for short jobs
      time = '1h'                //set walltime for short jobs
   }
   withLabel: 'local' {          //not used at the moment
      executor = 'local'         //jobs with this labels will be executed locally (typically trivial jobs)
   }
   withLabel: 'usePicard' {
      container = 'gatk.simg'    //container for the GATK softwares
   }

}
executor {
   name = 'pbspro'               //nextflow operator for the executor name (grid manager)
   pollInterval = '1 min'        //inteval at wich nextflow checks the jobs (warning to fast may induce crash in the workflow)
   queueStatInterval = '2 min'   //
   exitReadTimeout = '3600 sec'  //
}
singularity {
   enabled = true                //singularity mandatory options
   autoMounts = true             //singularity mandatory options
}
